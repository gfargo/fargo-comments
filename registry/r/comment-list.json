{
  "name": "fargo-comments-comment-list",
  "type": "registry:lib",
  "dependencies": [
    "@emoji-mart/data@latest",
    "@lexical/link@latest",
    "@lexical/list@latest",
    "@lexical/react@latest",
    "@lexical/utils@latest",
    "class-variance-authority@^0.7.1",
    "clsx@^2.1.1",
    "date-fns@4.1.0",
    "emoji-mart@latest",
    "lexical@latest",
    "lexical-beautiful-mentions@latest",
    "lucide-react@^0.454.0",
    "tailwind-merge@^2.5.5"
  ],
  "registryDependencies": [
    "https://comments.griffen.codes/api/registry/r/core"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "lib/components/comments/comment-list.tsx",
      "content": "\"use client\";\n\nimport { useMemo } from \"react\";\nimport { CommentVariation } from \"@/lib/comments/components/comments/comment-variations\";\nimport { type CommentVariant } from \"@/lib/comments/types/comments\";\nimport { CommentSearch } from \"@/lib/comments/components/comments/comment-search\";\nimport { LexicalCommentComposer } from \"@/lib/comments/components/lexical/lexical-comment-composer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { MessageSquare, Plus, SortAsc, X } from \"lucide-react\";\nimport { useCommentActions } from \"@/lib/comments/hooks/use-comment-actions\";\nimport { useComments } from \"@/lib/comments/contexts/comment-context\"; // Fixed import path to use correct location\nimport type { Comment, User } from \"@/lib/comments/types/comments\";\nimport { useState } from \"react\";\n\ninterface CommentListProps {\n  comments: Comment[];\n  currentUser: User;\n  sourceId?: string;\n  sourceType?: string;\n  title?: string;\n  variant?: CommentVariant;\n  enableSearch?: boolean;\n  enableSorting?: boolean;\n  showAddForm?: boolean;\n  showComposerByDefault?: boolean;\n  onAddComment?: (\n    content: string,\n    editorState: string,\n    sourceId?: string,\n    sourceType?: string\n  ) => void;\n  onReply?: (content: string, editorState: string, parentId: string) => void;\n  onEdit?: (commentId: string, content: string, editorState: string) => void;\n  onDelete?: (commentId: string) => void;\n  onLike?: (commentId: string) => void;\n  onShare?: (commentId: string) => void;\n  onForward?: (commentId: string) => void;\n  onApprove?: (commentId: string) => void;\n  onReact?: (commentId: string, reaction: string) => void;\n  getRepliesForComment?: (commentId: string) => Comment[];\n}\n\ntype SortOption = \"newest\" | \"oldest\" | \"most-replies\" | \"author\";\n\nexport function CommentList({\n  comments,\n  currentUser,\n  sourceId,\n  sourceType,\n  title = \"Comments\",\n  variant = \"card\",\n  enableSearch = false,\n  enableSorting = false,\n  showAddForm = true,\n  showComposerByDefault = false,\n  onAddComment,\n  onReply,\n  onEdit,\n  onDelete,\n  onLike,\n  onShare,\n  onForward,\n  onApprove,\n  onReact,\n  getRepliesForComment,\n}: CommentListProps) {\n  // The `title` prop is passed for consistency with other variants,\n  // but is not used in this component.\n  if (title) {\n    // do nothing\n  }\n  const { config } = useComments(); // Import useComments hook to access global config\n\n  const {\n    handleCommentSubmit,\n    handleReplySubmit,\n    handleStartReply,\n    handleCancelReply,\n    handleToggleComposer,\n    replyingTo,\n    replyContext,\n    showComposer: hookShowComposer,\n    isPending,\n    handleLike: hookHandleLike,\n    handleShare: hookHandleShare,\n    handleForward: hookHandleForward,\n    handleApprove: hookHandleApprove,\n    handleReact: hookHandleReact,\n  } = useCommentActions();\n\n  const [sortBy, setSortBy] = useState<SortOption>(\"newest\");\n  const [filteredComments, setFilteredComments] = useState<Comment[]>(comments);\n  const [composerKey, setComposerKey] = useState(0);\n  const [replyComposerKeys, setReplyComposerKeys] = useState<\n    Record<string, number>\n  >({});\n\n  const handleAddCommentWithReset = async (\n    content: string,\n    editorState: string\n  ) => {\n    try {\n      await finalHandlers.onAddComment(\n        content,\n        editorState,\n        sourceId,\n        sourceType\n      );\n      setComposerKey((prev) => prev + 1);\n    } catch (error) {\n      console.error(\"Failed to add comment:\", error);\n    }\n  };\n\n  const handleReplyWithReset = async (\n    content: string,\n    editorState: string,\n    parentId: string\n  ) => {\n    try {\n      await finalHandlers.onReply(content, editorState, parentId);\n      setReplyComposerKeys((prev) => ({\n        ...prev,\n        [parentId]: (prev[parentId] || 0) + 1,\n      }));\n      handleCancelReply();\n    } catch (error) {\n      console.error(\"Failed to add reply:\", error);\n    }\n  };\n\n  const finalHandlers = {\n    onAddComment:\n      onAddComment ||\n      ((content: string, editorState: string) =>\n        handleCommentSubmit(content, editorState, sourceId, sourceType)),\n    onReply:\n      onReply ||\n      ((content: string, editorState: string, parentId: string) =>\n        handleReplySubmit(content, editorState, parentId, comments)),\n    onEdit: onEdit,\n    onDelete: onDelete,\n    onLike: onLike || hookHandleLike,\n    onShare: onShare || hookHandleShare,\n    onForward: onForward || hookHandleForward,\n    onApprove: onApprove || hookHandleApprove,\n    onReact: onReact || hookHandleReact,\n  };\n\n  const users = useMemo(() => {\n    const userMap = new Map();\n    if (comments && Array.isArray(comments)) {\n      comments.forEach((comment) => {\n        if (!userMap.has(comment.authorId)) {\n          userMap.set(comment.authorId, comment.author);\n        }\n      });\n    }\n    return Array.from(userMap.values());\n  }, [comments]);\n\n  const threadedComments = useMemo(() => {\n    const commentsToSort = enableSearch ? filteredComments : comments;\n    const topLevelComments = commentsToSort.filter(\n      (comment) => !comment.parentId\n    );\n\n    const sortedTopLevel = [...topLevelComments].sort((a, b) => {\n      switch (sortBy) {\n        case \"oldest\":\n          return a.createdAt.getTime() - b.createdAt.getTime();\n        case \"most-replies\":\n          const aReplies = getRepliesForComment?.(a.id)?.length || 0;\n          const bReplies = getRepliesForComment?.(b.id)?.length || 0;\n          return bReplies - aReplies;\n        case \"author\":\n          return a.author.name.localeCompare(b.author.name);\n        case \"newest\":\n        default:\n          return b.createdAt.getTime() - a.createdAt.getTime();\n      }\n    });\n\n    const flatThreads: Comment[] = [];\n    sortedTopLevel.forEach((parent) => {\n      flatThreads.push(parent);\n      // Only get replies for top-level comments (flat threading)\n      const replies = getRepliesForComment?.(parent.id) || [];\n      const sortedReplies = [...replies].sort(\n        (a, b) => a.createdAt.getTime() - b.createdAt.getTime()\n      );\n      flatThreads.push(...sortedReplies);\n    });\n\n    return flatThreads;\n  }, [comments, enableSearch, filteredComments, sortBy, getRepliesForComment]);\n\n  const totalComments = comments?.length || 0;\n  const displayedComments = enableSearch\n    ? filteredComments?.length || 0\n    : totalComments;\n\n  const shouldShowComposer = showComposerByDefault || hookShowComposer;\n\n  const getComposerPlaceholder = (isReply = false) => {\n    if (isReply && replyContext) {\n      return `@${replyContext.authorName} `;\n    }\n    return config.placeholder || \"Add a comment...\";\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          {!enableSearch && (\n            <Badge\n              variant=\"secondary\"\n              className=\"text-sm\"\n            >\n              {displayedComments}{\" \"}\n              {displayedComments === 1 ? \"comment\" : \"comments\"}\n              {displayedComments !== totalComments && ` of ${totalComments}`}\n            </Badge>\n          )}\n          {isPending && (\n            <Badge\n              variant=\"outline\"\n              className=\"text-xs\"\n            >\n              Updating...\n            </Badge>\n          )}\n          {enableSearch && displayedComments !== totalComments && (\n            <span className=\"text-sm text-gray-600\">Filtered results</span>\n          )}\n        </div>\n\n        <div className=\"flex items-center gap-3\">\n          {enableSorting && (\n            <Select\n              value={sortBy}\n              onValueChange={(value: SortOption) => setSortBy(value)}\n            >\n              <SelectTrigger className=\"w-36 h-9\">\n                <SortAsc className=\"h-4 w-4 mr-1\" />\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"newest\">Newest First</SelectItem>\n                <SelectItem value=\"oldest\">Oldest First</SelectItem>\n                <SelectItem value=\"most-replies\">Most Replies</SelectItem>\n                <SelectItem value=\"author\">By Author</SelectItem>\n              </SelectContent>\n            </Select>\n          )}\n\n          {showAddForm && !showComposerByDefault && (\n            <Button\n              onClick={handleToggleComposer}\n              size=\"sm\"\n              disabled={isPending}\n              className=\"h-9\"\n            >\n              {hookShowComposer ? (\n                <>\n                  <X className=\"h-4 w-4 mr-1\" />\n                  Cancel\n                </>\n              ) : (\n                <>\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  Add Comment\n                </>\n              )}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {enableSearch && (\n        <CommentSearch\n          comments={comments}\n          users={users}\n          onFilteredCommentsChange={setFilteredComments}\n        />\n      )}\n\n      {/* Comment Composer */}\n      {showAddForm && shouldShowComposer && (\n        <div className=\"\">\n          <LexicalCommentComposer\n            key={composerKey}\n            onSubmit={handleAddCommentWithReset}\n            placeholder={getComposerPlaceholder()}\n            variant={variant}\n          />\n          {!showComposerByDefault && (\n            <div className=\"mt-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleToggleComposer}\n                className=\"text-xs text-gray-500\"\n              >\n                Cancel\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Flat Thread Comment List */}\n      <div className=\"space-y-4\">\n        {threadedComments.length === 0 ? (\n          <div className=\"text-center py-12 text-gray-500\">\n            <MessageSquare className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\n            <p className=\"text-base\">\n              {enableSearch && displayedComments === 0\n                ? \"No comments match your search.\"\n                : \"No comments yet. Be the first to add one!\"}\n            </p>\n          </div>\n        ) : (\n          threadedComments.map((comment) => {\n            const isReply = !!comment.parentId;\n            const commentReplies = !isReply\n              ? getRepliesForComment?.(comment.id) || []\n              : [];\n\n            return (\n              <div key={comment.id}>\n                <CommentVariation\n                  comment={comment}\n                  currentUser={currentUser}\n                  variant={variant}\n                  showInlineEdit={false}\n                  replies={commentReplies}\n                  isReplyingTo={replyingTo === comment.id}\n                  onEdit={finalHandlers.onEdit}\n                  onDelete={finalHandlers.onDelete}\n                  onReply={handleStartReply}\n                  onReplyCancel={handleCancelReply}\n                  onLike={finalHandlers.onLike}\n                  onShare={finalHandlers.onShare}\n                  onForward={finalHandlers.onForward}\n                  onApprove={finalHandlers.onApprove}\n                  onReact={finalHandlers.onReact}\n                />\n\n                {replyingTo === comment.id && (\n                  <div className=\"mt-3 ml-8 pl-4 p-3\">\n                    <div className=\"text-sm text-gray-600 mb-2\">\n                      Replying to{\" \"}\n                      {replyContext?.authorName || comment.author.name}\n                    </div>\n                    <LexicalCommentComposer\n                      key={replyComposerKeys[comment.id] || 0}\n                      onSubmit={(content, editorState) =>\n                        handleReplyWithReset(content, editorState, comment.id)\n                      }\n                      placeholder={getComposerPlaceholder(true)}\n                      variant={variant}\n                    />\n                    <div className=\"mt-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={handleCancelReply}\n                        className=\"text-xs text-gray-500\"\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "type": "registry:component",
      "path": "lib/components/comments/comment-search.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\n\nimport { useState, useMemo } from \"react\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Search, Filter, X, ChevronDown } from \"lucide-react\"\nimport type { Comment, User as UserType } from \"@/lib/comments/types/comments\"\n\ninterface CommentSearchProps {\n  comments: Comment[]\n  onFilteredCommentsChange: (comments: Comment[]) => void\n  users: UserType[]\n}\n\ninterface SearchFilters {\n  query: string\n  author: string\n  dateRange: string\n  status: string\n}\n\nexport function CommentSearch({ comments, onFilteredCommentsChange, users }: CommentSearchProps) {\n  const [filters, setFilters] = useState<SearchFilters>({\n    query: \"\",\n    author: \"\",\n    dateRange: \"\",\n    status: \"\",\n  })\n  const [showAdvanced, setShowAdvanced] = useState(false)\n\n  const filteredComments = useMemo(() => {\n    const safeComments = Array.isArray(comments) ? comments : []\n    let filtered = [...safeComments]\n\n    // Text search\n    if (filters.query) {\n      const query = filters.query.toLowerCase()\n      filtered = filtered.filter(\n        (comment) =>\n          comment.content.toLowerCase().includes(query) ||\n          comment.author.name.toLowerCase().includes(query) ||\n          comment.author.email.toLowerCase().includes(query),\n      )\n    }\n\n    if (filters.author && filters.author !== \"\" && filters.author !== \"any\") {\n      filtered = filtered.filter((comment) => comment.authorId === filters.author)\n    }\n\n    // Date range filter\n    if (filters.dateRange && filters.dateRange !== \"\" && filters.dateRange !== \"any\") {\n      const now = new Date()\n      const cutoffDate = new Date()\n\n      switch (filters.dateRange) {\n        case \"today\":\n          cutoffDate.setHours(0, 0, 0, 0)\n          break\n        case \"week\":\n          cutoffDate.setDate(now.getDate() - 7)\n          break\n        case \"month\":\n          cutoffDate.setMonth(now.getMonth() - 1)\n          break\n      }\n\n      filtered = filtered.filter((comment) => comment.createdAt >= cutoffDate)\n    }\n\n    if (filters.status && filters.status !== \"\" && filters.status !== \"any\") {\n      filtered = filtered.filter((comment) => comment.status === filters.status)\n    }\n\n    return filtered\n  }, [comments, filters])\n\n  const handleFilterChange = (key: keyof SearchFilters, value: string) => {\n    const newFilters = { ...filters, [key]: value }\n    setFilters(newFilters)\n  }\n\n  const clearFilters = () => {\n    setFilters({\n      query: \"\",\n      author: \"\",\n      dateRange: \"\",\n      status: \"\",\n    })\n  }\n\n  const activeFilterCount = Object.values(filters).filter(\n    (value) => value !== \"\" && value !== \"any\"\n  ).length\n\n  // Update parent component when filtered comments change\n  React.useEffect(() => {\n    onFilteredCommentsChange(filteredComments)\n  }, [filteredComments, onFilteredCommentsChange])\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center gap-2\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search comments, authors, or content...\"\n            value={filters.query}\n            onChange={(e) => handleFilterChange(\"query\", e.target.value)}\n            className=\"pl-10 h-9\"\n          />\n        </div>\n        <Button variant=\"outline\" size=\"sm\" onClick={() => setShowAdvanced(!showAdvanced)} className=\"h-9 px-3\">\n          <Filter className=\"h-4 w-4 mr-1\" />\n          Filters\n          {activeFilterCount > 0 && (\n            <Badge variant=\"secondary\" className=\"ml-2 h-5 px-1.5 text-xs\">\n              {activeFilterCount}\n            </Badge>\n          )}\n          <ChevronDown className={`h-3 w-3 ml-1 transition-transform ${showAdvanced ? \"rotate-180\" : \"\"}`} />\n        </Button>\n        {activeFilterCount > 0 && (\n          <Button variant=\"ghost\" size=\"sm\" onClick={clearFilters} className=\"h-9 px-2\">\n            <X className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n\n      {showAdvanced && (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 p-3 bg-muted/30 rounded-lg border\">\n          <div className=\"space-y-1.5\">\n            <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Author</label>\n            <Select value={filters.author} onValueChange={(value) => handleFilterChange(\"author\", value)}>\n              <SelectTrigger className=\"h-8\">\n                <SelectValue placeholder=\"Any author\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"any\">Any author</SelectItem>\n                {users.map((user) => (\n                  <SelectItem key={user.id} value={user.id}>\n                    {user.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-1.5\">\n            <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Date Range</label>\n            <Select value={filters.dateRange} onValueChange={(value) => handleFilterChange(\"dateRange\", value)}>\n              <SelectTrigger className=\"h-8\">\n                <SelectValue placeholder=\"Any time\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"any\">Any time</SelectItem>\n                <SelectItem value=\"today\">Today</SelectItem>\n                <SelectItem value=\"week\">Past week</SelectItem>\n                <SelectItem value=\"month\">Past month</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-1.5\">\n            <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Status</label>\n            <Select value={filters.status} onValueChange={(value) => handleFilterChange(\"status\", value)}>\n              <SelectTrigger className=\"h-8\">\n                <SelectValue placeholder=\"Any status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"any\">Any status</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"deleted\">Deleted</SelectItem>\n                <SelectItem value=\"hidden\">Hidden</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      )}\n\n      <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n        <span>\n          {filteredComments.length} of {Array.isArray(comments) ? comments.length : 0} comments\n        </span>\n        {activeFilterCount > 0 && <span className=\"text-primary font-medium\">Filtered</span>}\n      </div>\n    </div>\n  )\n}\n"
    }
  ]
}
