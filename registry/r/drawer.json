{
  "name": "fargo-comments-drawer",
  "type": "registry:lib",
  "dependencies": [
    "@emoji-mart/data@latest",
    "@lexical/link@latest",
    "@lexical/list@latest",
    "@lexical/react@latest",
    "@lexical/utils@latest",
    "class-variance-authority@^0.7.1",
    "clsx@^2.1.1",
    "date-fns@4.1.0",
    "emoji-mart@latest",
    "lexical@latest",
    "lexical-beautiful-mentions@latest",
    "lucide-react@^0.454.0",
    "tailwind-merge@^2.5.5"
  ],
  "registryDependencies": [
    "https://comments.griffen.codes/api/registry/r/core",
    "https://comments.griffen.codes/api/registry/r/comment-list"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "lib/components/comments/comment-drawer.tsx",
      "content": "\"use client\"\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { MessageSquare } from \"lucide-react\"\nimport { CommentList } from \"./comment-list\"\nimport { useComments } from \"@/lib/comments/contexts/comment-context\"\nimport { useCommentActions } from \"@/lib/comments/hooks/use-comment-actions\"\nimport { CommentVariant } from '@/lib/comments/types/comments'\n\ninterface CommentDrawerProps {\n  sourceId?: string\n  sourceType?: string\n  variant?: CommentVariant\n  enableSearch?: boolean\n  enableSorting?: boolean\n  enableComposer?: boolean\n  enableFiltering?: boolean\n  title?: string\n  triggerLabel?: string\n  width?: string\n}\n\nexport function CommentDrawer({\n  sourceId,\n  sourceType,\n  variant = \"card\",\n  enableSearch = true,\n  enableSorting = true,\n  enableComposer = true,\n  title = \"Comments\",\n  triggerLabel = \"All Comments\",\n  width = \"700px\",\n}: CommentDrawerProps) {\n  const { state, currentUser, getcommentsSource, getRepliesForComment } = useComments()\n  const {\n    handleAddComment,\n    handleUpdateComment,\n    handleDeleteComment,\n    handleLike,\n    handleShare,\n    handleForward,\n    handleApprove,\n    handleReact,\n  } = useCommentActions()\n\n  const comments = sourceId ? getcommentsSource(sourceId, sourceType) : state.comments\n\n  return (\n    <Sheet>\n      <SheetTrigger asChild>\n        <Button variant=\"outline\" className=\"gap-2 bg-transparent w-full\">\n          <MessageSquare className=\"h-4 w-4\" />\n          {triggerLabel}\n        </Button>\n      </SheetTrigger>\n      <SheetContent className=\"p-0\" style={{ width, maxWidth: \"none\" }}>\n        <div className=\"flex flex-col h-screen max-h-screen pt-4\">\n          <SheetHeader className=\"p-6 border-b flex-shrink-0 sr-only\">\n            <SheetTitle className=\"flex items-center gap-2\">\n              <MessageSquare className=\"h-5 w-5\" />\n              {title}\n              <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                {variant.charAt(0).toUpperCase() + variant.slice(1)} Style\n              </Badge>\n            </SheetTitle>\n          </SheetHeader>\n\n          <div className=\"flex-1 overflow-y-auto min-h-0\">\n            <div className=\"p-6\">\n              <CommentList\n                comments={comments}\n                currentUser={currentUser!}\n                sourceId={sourceId}\n                sourceType={sourceType}\n                variant={variant}\n                enableSearch={enableSearch}\n                enableSorting={enableSorting}\n                showAddForm={enableComposer}\n                onAddComment={(content, editorState) => handleAddComment(content, editorState, sourceId, sourceType)}\n                onEdit={handleUpdateComment}\n                onDelete={handleDeleteComment}\n                onLike={handleLike}\n                onShare={handleShare}\n                onForward={handleForward}\n                onApprove={handleApprove}\n                onReact={handleReact}\n                getRepliesForComment={getRepliesForComment}\n              />\n            </div>\n          </div>\n        </div>\n      </SheetContent>\n    </Sheet>\n  )\n}\n"
    }
  ]
}
