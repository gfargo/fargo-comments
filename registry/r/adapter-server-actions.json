{
  "name": "fargo-comments-adapter-server-actions",
  "type": "registry:lib",
  "dependencies": [
    "@emoji-mart/data@latest",
    "@lexical/link@latest",
    "@lexical/list@latest",
    "@lexical/react@latest",
    "@lexical/utils@latest",
    "class-variance-authority@^0.7.1",
    "clsx@^2.1.1",
    "date-fns@4.1.0",
    "emoji-mart@latest",
    "lexical@latest",
    "lexical-beautiful-mentions@latest",
    "lucide-react@^0.454.0",
    "tailwind-merge@^2.5.5"
  ],
  "registryDependencies": [
    "https://comments.griffen.codes/api/registry/r/core"
  ],
  "files": [
    {
      "type": "registry:lib",
      "path": "lib/adapters/cached-server-action-adapter.ts",
      "content": "import { cache } from \"react\"\nimport type { Comment, CommentThread, User, MentionUser, MentionTag } from \"@/lib/comments/types/comments\"\nimport type { CommentStorageAdapter, StorageAdapterConfig } from \"./comment-storage-adapter\"\n\n// Type definitions for server actions that need to be implemented by the consumer\nexport type ServerActionSet = {\n  // Cached read operations\n  getCommentsAction: () => Promise<Comment[]>\n  getcommentsSourceAction: (sourceId: string, sourceType?: string) => Promise<Comment[]>\n  getCommentThreadsAction: (sourceId?: string, sourceType?: string) => Promise<CommentThread[]>\n  \n  // Non-cached write operations\n  addCommentAction: (comment: Comment) => Promise<void>\n  addLexicalCommentAction: (\n    content: string,\n    editorState: string,\n    author: User,\n    mentions?: MentionUser[],\n    tags?: MentionTag[],\n    sourceId?: string,\n    sourceType?: string,\n    parentId?: string,\n  ) => Promise<Comment>\n  updateCommentAction: (commentId: string, updates: Partial<Comment>) => Promise<void>\n  updateCommentWithEditorStateAction: (\n    commentId: string,\n    content: string,\n    editorState: string,\n    mentions?: MentionUser[],\n    tags?: MentionTag[],\n  ) => Promise<void>\n  deleteCommentAction: (commentId: string) => Promise<void>\n  saveCommentsAction: (comments: Comment[]) => Promise<void>\n  clearAllStorageAction: () => Promise<void>\n}\n\nexport interface CachedServerActionAdapterConfig extends StorageAdapterConfig {\n  serverActions: ServerActionSet\n  // Optional: Custom cache TTL or invalidation strategy\n  enableCaching?: boolean\n}\n\nexport class CachedServerActionAdapter implements CommentStorageAdapter {\n  // Cached versions of read operations using React cache()\n  private cachedGetComments: () => Promise<Comment[]>\n  private cachedGetcommentsSource: (sourceId: string, sourceType?: string) => Promise<Comment[]>\n  private cachedGetCommentThreads: (sourceId?: string, sourceType?: string) => Promise<CommentThread[]>\n\n  constructor(private config: CachedServerActionAdapterConfig) {\n    if (!config.serverActions) {\n      throw new Error(\"CachedServerActionAdapter requires serverActions to be provided in config\")\n    }\n\n    // Create cached versions of read operations\n    // React cache() ensures these functions are deduplicated within a single request\n    const enableCaching = config.enableCaching !== false // default to true\n    \n    if (enableCaching) {\n      this.cachedGetComments = cache(config.serverActions.getCommentsAction)\n      this.cachedGetcommentsSource = cache(config.serverActions.getcommentsSourceAction)\n      this.cachedGetCommentThreads = cache(config.serverActions.getCommentThreadsAction)\n    } else {\n      // Direct pass-through if caching is disabled\n      this.cachedGetComments = config.serverActions.getCommentsAction\n      this.cachedGetcommentsSource = config.serverActions.getcommentsSourceAction\n      this.cachedGetCommentThreads = config.serverActions.getCommentThreadsAction\n    }\n  }\n\n  // Read operations - use cached versions\n  async getComments(): Promise<Comment[]> {\n    return this.cachedGetComments()\n  }\n\n  async getcommentsSource(sourceId: string, sourceType?: string): Promise<Comment[]> {\n    return this.cachedGetcommentsSource(sourceId, sourceType)\n  }\n\n  async getCommentThreads(sourceId?: string, sourceType?: string): Promise<CommentThread[]> {\n    return this.cachedGetCommentThreads(sourceId, sourceType)\n  }\n\n  // Write operations - direct calls (no caching needed)\n  async saveComments(comments: Comment[]): Promise<void> {\n    return this.config.serverActions.saveCommentsAction(comments)\n  }\n\n  async addComment(comment: Comment): Promise<void> {\n    return this.config.serverActions.addCommentAction(comment)\n  }\n\n  async updateComment(commentId: string, updates: Partial<Comment>): Promise<void> {\n    return this.config.serverActions.updateCommentAction(commentId, updates)\n  }\n\n  async deleteComment(commentId: string): Promise<void> {\n    return this.config.serverActions.deleteCommentAction(commentId)\n  }\n\n  async addLexicalComment(\n    content: string,\n    editorState: string,\n    author: User,\n    mentions: MentionUser[] = [],\n    tags: MentionTag[] = [],\n    sourceId?: string,\n    sourceType?: string,\n    parentId?: string,\n  ): Promise<Comment> {\n    return this.config.serverActions.addLexicalCommentAction(\n      content,\n      editorState,\n      author,\n      mentions,\n      tags,\n      sourceId,\n      sourceType,\n      parentId,\n    )\n  }\n\n  async updateCommentWithEditorState(\n    commentId: string,\n    content: string,\n    editorState: string,\n    mentions?: MentionUser[],\n    tags?: MentionTag[],\n  ): Promise<void> {\n    return this.config.serverActions.updateCommentWithEditorStateAction(\n      commentId,\n      content,\n      editorState,\n      mentions,\n      tags,\n    )\n  }\n\n  async clearAllStorage(): Promise<void> {\n    return this.config.serverActions.clearAllStorageAction()\n  }\n}"
    },
    {
      "type": "registry:lib",
      "path": "lib/adapters/server-action-adapter.ts",
      "content": "import type { Comment, CommentThread, User, MentionUser, MentionTag } from \"@/lib/comments/types/comments\"\nimport type { CommentStorageAdapter, StorageAdapterConfig } from \"./comment-storage-adapter\"\n\nexport class ServerActionAdapter implements CommentStorageAdapter {\n  constructor(private config: StorageAdapterConfig) {\n    // The config is passed to the constructor but not used in this adapter.\n    // This is a placeholder for future use.\n    if (this.config) {\n      // do nothing\n    }\n  }\n\n  async getComments(): Promise<Comment[]> {\n    throw new Error(\"ServerActionAdapter: Please implement getCommentsAction in your app/actions/comments.ts file\")\n  }\n\n  async saveComments(comments: Comment[]): Promise<void> {\n    // The `comments` parameter is a placeholder for the actual implementation.\n    if (comments) {\n      // do nothing\n    }\n    throw new Error(\"ServerActionAdapter: Please implement saveCommentsAction in your app/actions/comments.ts file\")\n  }\n\n  async addComment(comment: Comment): Promise<void> {\n    // The `comment` parameter is a placeholder for the actual implementation.\n    if (comment) {\n      // do nothing\n    }\n    throw new Error(\"ServerActionAdapter: Please implement addCommentAction in your app/actions/comments.ts file\")\n  }\n\n  async updateComment(commentId: string, updates: Partial<Comment>): Promise<void> {\n    // The `commentId` and `updates` parameters are placeholders for the actual implementation.\n    if (commentId && updates) {\n      // do nothing\n    }\n    throw new Error(\"ServerActionAdapter: Please implement updateCommentAction in your app/actions/comments.ts file\")\n  }\n\n  async deleteComment(commentId: string): Promise<void> {\n    // The `commentId` parameter is a placeholder for the actual implementation.\n    if (commentId) {\n      // do nothing\n    }\n    throw new Error(\"ServerActionAdapter: Please implement deleteCommentAction in your app/actions/comments.ts file\")\n  }\n\n  async addLexicalComment(\n    content: string,\n    editorState: string,\n    author: User,\n    mentions: MentionUser[] = [],\n    tags: MentionTag[] = [],\n    sourceId?: string,\n    sourceType?: string,\n    parentId?: string,\n  ): Promise<Comment> {\n    // The parameters are placeholders for the actual implementation.\n    if (content && editorState && author && mentions && tags && sourceId && sourceType && parentId) {\n      // do nothing\n    }\n    throw new Error(\n      \"ServerActionAdapter: Please implement addLexicalCommentAction in your app/actions/comments.ts file\",\n    )\n  }\n\n  async updateCommentWithEditorState(\n    commentId: string,\n    content: string,\n    editorState: string,\n  ): Promise<void> {\n    // The parameters are placeholders for the actual implementation.\n    if (commentId && content && editorState) {\n      // do nothing\n    }\n    throw new Error(\n      \"ServerActionAdapter: Please implement updateCommentWithEditorStateAction in your app/actions/comments.ts file\",\n    )\n  }\n\n  async getcommentsSource(sourceId: string, sourceType: string): Promise<Comment[]> {\n    // The `sourceId` and `sourceType` parameters are placeholders for the actual implementation.\n    if (sourceId && sourceType) {\n      // do nothing\n    }\n    throw new Error(\n      \"ServerActionAdapter: Please implement getcommentsSourceAction in your app/actions/comments.ts file\",\n    )\n  }\n\n  async getCommentThreads(sourceId?: string, sourceType?: string): Promise<CommentThread[]> {\n    // The `sourceId` and `sourceType` parameters are placeholders for the actual implementation.\n    if (sourceId && sourceType) {\n      // do nothing\n    }\n    throw new Error(\n      \"ServerActionAdapter: Please implement getCommentThreadsAction in your app/actions/comments.ts file\",\n    )\n  }\n\n  async clearAllStorage(): Promise<void> {\n    throw new Error(\"ServerActionAdapter: Please implement clearAllStorageAction in your app/actions/comments.ts file\")\n  }\n}\n"
    }
  ]
}