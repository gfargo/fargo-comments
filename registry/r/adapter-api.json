{
  "name": "fargo-comments-adapter-api",
  "type": "registry:lib",
  "dependencies": [
    "@emoji-mart/data@latest",
    "@lexical/link@latest",
    "@lexical/list@latest",
    "@lexical/react@latest",
    "@lexical/utils@latest",
    "class-variance-authority@^0.7.1",
    "clsx@^2.1.1",
    "date-fns@4.1.0",
    "emoji-mart@latest",
    "lexical@latest",
    "lexical-beautiful-mentions@latest",
    "lucide-react@^0.454.0",
    "tailwind-merge@^2.5.5"
  ],
  "registryDependencies": [
    "https://comments.griffen.codes/api/registry/r/core"
  ],
  "files": [
    {
      "type": "registry:lib",
      "path": "lib/adapters/api-adapter.ts",
      "content": "import type { Comment, CommentThread, User, MentionUser, MentionTag } from \"@/lib/comments/types/comments\"\nimport type { CommentStorageAdapter, StorageAdapterConfig } from \"./comment-storage-adapter\"\n\nexport class ApiAdapter implements CommentStorageAdapter {\n  private baseUrl: string\n  private headers: Record<string, string>\n\n  constructor(config: StorageAdapterConfig) {\n    this.baseUrl = config.apiEndpoint || \"/api\"\n    this.headers = {\n      \"Content-Type\": \"application/json\",\n      ...config.headers,\n    }\n  }\n\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      headers: this.headers,\n      ...options,\n    })\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.statusText}`)\n    }\n\n    return response.json()\n  }\n\n  async getComments(): Promise<Comment[]> {\n    return this.request<Comment[]>(\"/comments\")\n  }\n\n  async saveComments(comments: Comment[]): Promise<void> {\n    await this.request(\"/comments/bulk\", {\n      method: \"PUT\",\n      body: JSON.stringify(comments),\n    })\n  }\n\n  async addComment(comment: Comment): Promise<void> {\n    await this.request(\"/comments\", {\n      method: \"POST\",\n      body: JSON.stringify(comment),\n    })\n  }\n\n  async updateComment(commentId: string, updates: Partial<Comment>): Promise<void> {\n    await this.request(`/comments/${commentId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify(updates),\n    })\n  }\n\n  async deleteComment(commentId: string): Promise<void> {\n    await this.request(`/comments/${commentId}`, {\n      method: \"DELETE\",\n    })\n  }\n\n  async addLexicalComment(\n    content: string,\n    editorState: string,\n    author: User,\n    mentions: MentionUser[] = [],\n    tags: MentionTag[] = [],\n    sourceId?: string,\n    sourceType?: string,\n    parentId?: string,\n  ): Promise<Comment> {\n    return this.request<Comment>(\"/comments/lexical\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        content,\n        editorState,\n        author,\n        mentions,\n        tags,\n        sourceId,\n        sourceType,\n        parentId,\n      }),\n    })\n  }\n\n  async updateCommentWithEditorState(commentId: string, content: string, editorState: string): Promise<void> {\n    await this.request(`/comments/${commentId}/lexical`, {\n      method: \"PATCH\",\n      body: JSON.stringify({ content, editorState }),\n    })\n  }\n\n  async getcommentsSource(sourceId: string, sourceType?: string): Promise<Comment[]> {\n    const query = `?sourceId=${sourceId}${sourceType ? `&sourceType=${sourceType}` : ''}`;\n    return this.request<Comment[]>(`/comments${query}`);\n  }\n\n  async getCommentThreads(sourceId?: string, sourceType?: string): Promise<CommentThread[]> {\n    const query = sourceId ? `?sourceId=${sourceId}${sourceType ? `&sourceType=${sourceType}` : ''}` : \"\";\n    return this.request<CommentThread[]>(`/comments/threads${query}`)\n  }\n\n  async clearAllStorage(): Promise<void> {\n    await this.request(\"/storage/clear\", { method: \"DELETE\" })\n  }\n}\n"
    }
  ]
}